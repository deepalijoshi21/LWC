@@@@@@@@@@@@ HTML FILE @@@@@@@@@@@

<template>
    <lightning-card>
        <div style="margin: 20px;">
            <lightning-combobox label=“Country” name=“country” options={countryOptions} value={selectedCountry} onchange={handleCountryChange}> </lightning-combobox>
        </div>
        
        <div style="margin: 20px;">
            <lightning-input type=“email” label=“Email” onchange={handleEmailChange} class="slds-p-around_medium"></lightning-input>
            <lightning-button onclick={sendEmail} label="Send Email"></lightning-button>
        </div>
    </lightning-card>
</template>

@@@@@@@@ JS FILE @@@@@@@@@@@@@

import { LightningElement ,  wire} from 'lwc';
import { loadScript } from 'lightning/platformResourceLoader';
import awsjssdk from '@salesforce/resourceUrl/awsjssdk';
import getLeads from '@salesforce/apex/LeadController.getLeads';
import scheduleEmail from '@salesforce/apex/EmailScheduler.scheduleEmail';
import { subscribe, unsubscribe } from 'lightning/empApi';

export default class SESBulkEmail extends LightningElement {
    // AWS SES configuration
    sesConfig = {
        accessKey: 'AKIARIDQ6L7M3RMXNX2U',
        secretAccessKey: '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',
        region: 'ap-south-1'
    };
    ses;

    connectedCallback() {
        // Subscribe to the platform event
        subscribe('/event/Email_Sent__e', -1, (event) => {
            console.log('Received platform event:', JSON.stringify(event));
            // Run the sendEmail method when the event is received
            this.sendEmail();
        }).then((subscription) => {
            console.log('Subscribed to platform event with subscription:', subscription);
        });
    }

    // Executed when the component is rendered on the page
    renderedCallback() {
        console.log('renderedCallback called');
        Promise.all([loadScript(this, awsjssdk)])
            .then(() => {
                console.log('awsjssdk loaded');
                this.AWSSDKIntialized();
            })
            .catch((error) => {
                console.log('error loading awsjssdk: ' + error);
            });
    }

    // Initialize AWS SDK and SES
    AWSSDKIntialized() {
        console.log('AWSSDKIntialized called');
        const AWS = window.AWS;
        console.log('AWS.config: ' + JSON.stringify(AWS.config));
        AWS.config.update({
            accessKeyId: this.sesConfig.accessKey,
            secretAccessKey: this.sesConfig.secretAccessKey,
            region: this.sesConfig.region
        });
        this.ses = new AWS.SES({ apiVersion: '2010-12-01' });
        console.log('SES initialized');
    }

    // Handler for email input change
    handleEmailChange(event) { 
        this.email = event.target.value; 
        
    }
    
    // Options for the country select dropdown
    countryOptions = [{ label: 'India', value: 'India' }, { label: 'USA', value: 'The United States of America' }
    ]; 

    selectedCountry;

    // Handler for country select dropdown change
    handleCountryChange(event) { this.selectedCountry = event.detail.value; }

    // handleCountryChange(event) { this.selectedCountry = event.detail.value; }
    @wire(getLeads , {Country: '$selectedCountry'})
    wiredLeads({data , error}){
        if(data){
            console.log('LeadData' , data);
            const leadtemplate = JSON.stringify(data);
            console.log('leadtemplate' , leadtemplate);
        }
        else if(error){
            console.log('Lead Error' , error);
        }
    }

    sendEmail() {
        console.log('sendEmail called');
        console.log('Source Email === ' ,this.email);
    
        // Calculate the desired send time
        let sendTime;
        if (this.selectedCountry === 'India') {
            // Schedule the email to be sent at 12 PM India time
            sendTime = new Date();
            sendTime.setHours(12, 0, 0, 0);
            if (sendTime < new Date()) {
                // If the send time is in the past, add one day to schedule it for tomorrow
                sendTime.setDate(sendTime.getDate() + 1);
            }
        } else if (this.selectedCountry === 'The United States of America') {
            // Schedule the email to be sent at 2 PM India time (which is equivalent to 2 AM in New York)
            sendTime = new Date();
            sendTime.setHours(15, 0, 0, 0);
            if (sendTime < new Date()) {
                // If the send time is in the past, add one day to schedule it for tomorrow
                sendTime.setDate(sendTime.getDate() + 1);
            }
        }
    
        // Log the calculated desired send time
        console.log('sendTime:', sendTime);
    
        // Call an Apex method to schedule a job to send the email at the desired time
        scheduleEmail({ country: this.selectedCountry, sendTime: sendTime })
            .then(result => {
                // Handle successful scheduling
                console.log('Email scheduled successfully');
            })
            .catch(error => {
                // Handle error
                console.error('Error scheduling email:', JSON.stringify(error));
            });
    
        getLeads({Country: this.selectedCountry})
            .then(leads => {
                console.log('Result Leads==',leads );
                console.log('Leads' , JSON.stringify(leads));
    
                const leademail = leads.map(lead => lead.Email);
                console.log('leademail' , JSON.stringify(leademail));
    
                leads.forEach(leadMap => {
                    const lead = Object.keys(leadMap)[0];
                    const leadEmail = lead.match(/Email:(.*?),/)[1];
                    console.log('Lead Email' , leadEmail);
                    const emailTemplate = leadMap[lead];
                    console.log('Emailtemplatesssss ',emailTemplate);
                    const emailSubject = emailTemplate.subject;
                    console.log('Emailtemplate Subject ',emailSubject);
                    const emailBody = emailTemplate.htmlBody;
                    console.log('Emailtemplate Body ',emailBody);
                    const params = {
                        Destination: {
                            BccAddresses: [],
                            CcAddresses: [],
                            ToAddresses: [leadEmail]
                        },
                        Message: {
                            Body: {
                                Text: {
                                    Charset: 'UTF-8',
                                    Data: emailBody
                                }
                            },
                            Subject: {
                                Charset: 'UTF-8',
                                Data: emailSubject
                            }
                        },
                        ReplyToAddresses: [],
                        Source: this.email
                    };
    
                    // Send email using SES
                    const sendEmail = this.ses.sendEmail(params).promise();
                    sendEmail
                        .then((data) => {
                            console.log('email submitted to SES', data);
                        })
                        .catch((error) => {
                            console.log('error sending email', JSON.stringify(error));
                        });
                });
            })
            .catch(error => {
                console.error('Error retrieving leads:', error);
            })
            .finally(()=>{
                console.log('EmailDataPoints' , JSON.stringify(this.ses.getSendStatistics().promise()));
            });
    }

    // sendEmail() {
    //     console.log('sendEmail called');
    //     console.log('Source Email === ' ,this.email);
    
    //     // Calculate the desired send time
    //     let sendTime;
    //     if (this.selectedCountry === 'India') {
    //         // Schedule the email to be sent at 12 PM India time
    //         sendTime = new Date();
    //         sendTime.setHours(12, 0, 0, 0);
    //         if (sendTime < new Date()) {
    //             // If the send time is in the past, add one day to schedule it for tomorrow
    //             sendTime.setDate(sendTime.getDate() + 1);
    //         }
    //     } else if (this.selectedCountry === 'The United States of America') {
    //         // Schedule the email to be sent at 2 PM India time (which is equivalent to 2 AM in New York)
    //         sendTime = new Date();
    //         sendTime.setHours(13, 0, 0, 0);
    //         if (sendTime < new Date()) {
    //             // If the send time is in the past, add one day to schedule it for tomorrow
    //             sendTime.setDate(sendTime.getDate() + 1);
    //         }
    //     }
    
    //     // Log the calculated desired send time
    //     console.log('sendTime:', sendTime);
    
    //     // Call an Apex method to schedule a job to send the email at the desired time
    //     scheduleEmail({ country: this.selectedCountry, sendTime: sendTime })
    //         .then(result => {
    //             // Handle successful scheduling
    //             console.log('Email scheduled successfully');
    //         })
    //         .catch(error => {
    //             // Handle error
    //             console.error('Error scheduling email:', JSON.stringify(error));
    //         });
    
    //     getLeads({Country: this.selectedCountry})
    //         .then(leads => {
    //             console.log('Result Leads==',leads );
    //             console.log('Leads' , JSON.stringify(leads));
                
    //             const leademail = leads.map(lead => lead.Email);
    //             console.log('leademail' , JSON.stringify(leademail));
    
    //             leads.forEach(leadMap => {
    //                 const lead = Object.keys(leadMap)[0];
    //                 const leadEmail = lead.match(/Email:(.*?),/)[1];
    //                 console.log('Lead Email' , leadEmail);
    //                 const emailTemplate = leadMap[lead];
    //                 console.log('Emailtemplatesssss ',emailTemplate);
    //                 const emailSubject = emailTemplate.subject;
    //                 console.log('Emailtemplate Subject ',emailSubject);
    //                 const emailBody = emailTemplate.htmlBody;
    //                 console.log('Emailtemplate Body ',emailBody);
    //                 const params = {
    //                     Destination: {
    //                         BccAddresses: [],
    //                         CcAddresses: [],
    //                         ToAddresses: [leadEmail]
    //                     },
    //                     Message: {
    //                         Body: {
    //                             Text: {
    //                                 Charset: 'UTF-8',
    //                                 Data: emailBody
    //                             }
    //                         },
    //                         Subject: {
    //                             Charset: 'UTF-8',
    //                             Data: emailSubject
    //                         }
    //                     },
    //                     ReplyToAddresses: [],
    //                     Source: this.email
    //                 };
    
    //                 // Send email using SES
    //                 const sendEmail = this.ses.sendEmail(params).promise();
    //                 sendEmail
    //                     .then((data) => {
    //                         console.log('email submitted to SES', data);
    //                     })
    //                     .catch((error) => {
    //                         console.log('error sending email', JSON.stringify(error));
    //                     });
    //             });
    //         })
    //         .catch(error => {
    //             console.error('Error retrieving leads:', error);
    //         })
    //         .finally(()=>{
    //             console.log('EmailDataPoints' , JSON.stringify(this.ses.getSendStatistics().promise()));
    //         });
    // }

    // Send email to selected leads
    // sendEmail() {
    //     console.log('sendEmail called');
    //     console.log('Source Email === ' ,this.email);
    //     getLeads({Country: this.selectedCountry})
    //         .then(leads => {
    //             console.log('Result Leads==',leads );
    //             console.log('Leads' , JSON.stringify(leads));
                
    //             const leademail = leads.map(lead => lead.Email);
    //             console.log('leademail' , JSON.stringify(leademail));

    //             leads.forEach(leadMap => {
    //                 const lead = Object.keys(leadMap)[0];
    //                 const leadEmail = lead.match(/Email:(.*?),/)[1];
    //                 console.log('Lead Email' , leadEmail);
    //                 // console.log('lead type' ,typeof lead);
    //                 // const leadValues = Object.values(leadMap)[0];
    //                 // console.log('Lead Values ',leadValues);
                    
    //                 // const leaddetail = Object.values(leadMap)[0];
    //                 // console.log('leaddetail' , leaddetail);
                
    //                 const emailTemplate = leadMap[lead];
    //                 console.log('Emailtemplatesssss ',emailTemplate);
    //                 const emailSubject = emailTemplate.subject;
    //                 console.log('Emailtemplate Subject ',emailSubject);
    //                 const emailBody = emailTemplate.htmlBody;
    //                 console.log('Emailtemplate Body ',emailBody);
    //                 const params = {
    //                     Destination: {
    //                         BccAddresses: [],
    //                         CcAddresses: [],
    //                         ToAddresses: [leadEmail]
    //                     },
    //                     Message: {
    //                         Body: {
    //                             // Html: {
    //                             //     Charset: 'UTF-8',
    //                             //     Data: 
    //                             // },
    //                             Text: {
    //                                 Charset: 'UTF-8',
    //                                 Data: emailBody
    //                             }
    //                         },
    //                         Subject: {
    //                             Charset: 'UTF-8',
    //                             Data: emailSubject
    //                         }
    //                     },
    //                     ReplyToAddresses: [],
    //                     Source: this.email
    //                 };
    //             // leads.forEach(lead => {
    //             //     const params = {
    //             //         Destination: {
    //             //             BccAddresses: [],
    //             //             CcAddresses: [],
    //             //             ToAddresses: [lead.Email]
    //             //         },
    //             //         Message: {
    //             //             Body: {
    //             //                 Html: {
    //             //                     Charset: 'UTF-8',
    //             //                     Data: `<html><body><h1>Hello ${lead.Name}</h1><p style='color:blue'>Welcome to Salesforce! We are happy to have you with us.</p><p>If you have any questions or need assistance, feel free to reach out to our support team.</p><p>Best regards,</p><p>The Salesforce Team</p></body></html>`
    //             //                 },
    //             //                 Text: {
    //             //                     Charset: 'UTF-8',
    //             //                     Data: `Hello ${lead.Name}, Welcome to Salesforce! We are happy to have you with us. If you have any questions or need assistance, feel free to reach out to our support team. Best regards, The Salesforce Team`
    //             //                 }
    //             //             },
    //             //             Subject: {
    //             //                 Charset: 'UTF-8',
    //             //                 Data: 'Test email'
    //             //             }
    //             //         },
    //             //         ReplyToAddresses: [],
    //             //         Source: this.email
    //             //     };

    //                 // Send email using SES
    //                 const sendEmail = this.ses.sendEmail(params).promise();
    //                 sendEmail
    //                     .then((data) => {
    //                         console.log('email submitted to SES', data);
    //                     })
    //                     .catch((error) => {
    //                         console.log('error sending email', JSON.stringify(error));
    //                     });
    //             });
    //         })
    //         .catch(error => {
    //             console.error('Error retrieving leads:', error);
    //         })
    //         .finally(()=>{
    //             console.log('EmailDataPoints' , JSON.stringify(this.ses.getSendStatistics().promise()));
    //         });
    // }
}

@@@@@@@@@@@@@ XML Meta FILE @@@@@@@@@@@@@@@

<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>57.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
    <target>lightning__AppPage</target>
    <target>lightning__HomePage</target>
    <target>lightning__RecordPage</target>
    </targets>
</LightningComponentBundle>

@@@@@@@@@@@ APEX Controller @@@@@@@@@@@@@

public with sharing class LeadController {

        @AuraEnabled(cacheable=true)
        public static List<Map<Object , Map<String, String>>> getLeads(String Country) {
            // Query the Lead records
            Set<String> SobjectFields = Schema.getGlobalDescribe().get('Lead').getDescribe().fields.getMap().keySet();    
            List<String> fieldsInList = new List<String>(SobjectFields);
            List<Lead> leads = Database.query('SELECT ' + String.join(fieldsInList, ',') + ' FROM Lead WHERE Email != null AND Status != \'Closed - Converted\' AND Nationality__c = :Country');
            System.debug('Lead List '+leads);
    
            // Create a list to hold the results
            List<Map<Object, Map<String, String> >> results = new List<Map<Object, Map<String, String>>>();
            
            // Get all EmailTemplate records and store them in a map
            Map<String, Id> templateMap = new Map<String, Id>();
            for (EmailTemplate template : [SELECT Id, DeveloperName FROM EmailTemplate WHERE DeveloperName IN ('USEmailTemplate', 'IndiaEmailTemplate')]) {
                templateMap.put(template.DeveloperName, template.Id);
            }
            
            // Loop through each Lead record
            for (Lead lead : leads) {
                // Set the email template ID based on the Nationality__c field
                Id targetObjectId = lead.Id;
                Id templateId;
                if (lead.Nationality__c == 'The United States of America') {
                    templateId = templateMap.get('USEmailTemplate');
                } else if (lead.Nationality__c == 'India') {
                    templateId = templateMap.get('IndiaEmailTemplate');
                } // Add more conditions for other countries as needed
                
                // Create a map to hold the Lead record and email template ID
                Map<Object , Map<String, String>> result = new Map<Object , Map<String, String>>();
    
    
                Messaging.SingleEmailMessage renderResults = Messaging.renderStoredEmailTemplate(templateId, targetObjectId, null);
            
                // Create a map to hold the subject and HTML body
                Map<String, String> templateresult = new Map<String, String>();
                templateresult.put('subject', renderResults.getSubject());
                templateresult.put('htmlBody', renderResults.getPlainTextBody());
    
                result.put(lead , templateresult);
                
                // Add the map to the results list
                results.add(result);
            }
            
            return results;
        }
}

//     @AuraEnabled(cacheable=true)
//     public static List<Map<Object , Map<String, String>>> getLeads(String Country) {
//         // Query the Lead records
//         Set<String> SobjectFields = Schema.getGlobalDescribe().get('Lead').getDescribe().fields.getMap().keySet();    
//         List<String> fieldsInList = new List<String>(SobjectFields);
//         List<Lead> leads = Database.query('SELECT ' + String.join(fieldsInList, ',') + ' FROM Lead WHERE Email != null AND Status != \'Closed - Converted\' AND Nationality__c = :Country');
//         System.debug('Lead List '+leads);

//         // Create a list to hold the results
//         List<Map<Object, Map<String, String> >> results = new List<Map<Object, Map<String, String>>>();
        
//         // Get all EmailTemplate records and store them in a map
//         Map<String, Id> templateMap = new Map<String, Id>();
//         for (EmailTemplate template : [SELECT Id, DeveloperName FROM EmailTemplate WHERE DeveloperName IN ('USEmailTemplate', 'IndiaEmailTemplate')]) {
//             templateMap.put(template.DeveloperName, template.Id);
//         }
        
//         // Loop through each Lead record
//         for (Lead lead : leads) {
//             // Set the email template ID based on the Nationality__c field
//             Id targetObjectId = lead.Id;
//             Id templateId;
//             if (lead.Nationality__c == 'The United States of America') {
//                 templateId = templateMap.get('USEmailTemplate');
//             } else if (lead.Nationality__c == 'India') {
//                 templateId = templateMap.get('IndiaEmailTemplate');
//             } // Add more conditions for other countries as needed
            
//             // Create a map to hold the Lead record and email template ID
//             Map<Object , Map<String, String>> result = new Map<Object , Map<String, String>>();


//             Messaging.SingleEmailMessage renderResults = Messaging.renderStoredEmailTemplate(templateId, targetObjectId, null);
        
//             // Create a map to hold the subject and HTML body
//             Map<String, String> templateresult = new Map<String, String>();
//             templateresult.put('subject', renderResults.getSubject());
//             templateresult.put('htmlBody', renderResults.getPlainTextBody());

//             result.put(lead , templateresult);
            
//             // Add the map to the results list
//             results.add(result);
//         }
        
//         return results;
//     }
// }


        // public String country;
        
        // public LeadController(String country) {
        //     this.country = country;
        // }
        
        // public void execute(SchedulableContext sc) {
        //     // Call the getLeads method to get the leads for the specified country
        //     List<Map<Object , Map<String, String>>> leads = LeadController.getLeads(country);
            
        //     // // Send the email to each lead
        //     // for (Map<Object , Map<String, String>> leadMap : leads) {
        //     //     // Extract the lead and email template from the map
        //     //     Lead lead = (Lead) leadMap.keySet().toArray()[0];
        //     //     Map<String, String> emailTemplate = leadMap.get(lead);
                
        //     //     // Send the email using SingleEmailMessage or another method
        //     //     // ...
        //     // }
        // }

    // @AuraEnabled(cacheable=true)
    //     public static List<Lead> getLeads(String Country) {
    //     Set<String> SobjectFields = Schema.getGlobalDescribe().get('Lead').getDescribe().fields.getMap().keySet();    
    //     List<String> fieldsInList = new List<String>(SobjectFields);
    //     List<Lead> ldList = Database.query('SELECT ' + String.join(fieldsInList, ',') + ' FROM Lead WHERE Email != null AND Status != \'Closed - Converted\' AND Nationality__c = \'Country\'');
    //     System.debug('Lead List '+ldList);
    //     return ldList;
    // }

    // @AuraEnabled(cacheable=true)
    //     public static List<Lead> getLeads(String Country) {
    //         return [SELECT Name, Email FROM Lead WHERE Email != null AND Status !='Closed - Converted' AND Nationality__c = :Country];
    //     }
    
    //Code to get email template
    // @AuraEnabled(cacheable=true)
    // public static List<Map<Object , Map<String, String>>> getLeads(String Country) {
    //     // Query the Lead records
    //     Set<String> SobjectFields = Schema.getGlobalDescribe().get('Lead').getDescribe().fields.getMap().keySet();    
    //     List<String> fieldsInList = new List<String>(SobjectFields);
    //     List<Lead> leads = Database.query('SELECT ' + String.join(fieldsInList, ',') + ' FROM Lead WHERE Email != null AND Status != \'Closed - Converted\' AND Nationality__c = :Country');
    //     System.debug('Lead List '+leads);

    //     //List<Lead> leads = [SELECT Name, Email, Nationality__c FROM Lead WHERE Email != null AND Status !='Closed - Converted' AND Nationality__c = :Country];
        
    //     // Create a list to hold the results
    //     List<Map<Object, Map<String, String> >> results = new List<Map<Object, Map<String, String>>>();
        
    //     // Loop through each Lead record
    //     for (Lead lead : leads) {
    //         // Set the email template ID based on the Nationality__c field
    //         Id targetObjectId = lead.Id;
    //         Id templateId;
    //         if (lead.Nationality__c == 'The United States of America') {
    //             templateId = [SELECT Id FROM EmailTemplate WHERE DeveloperName = 'USEmailTemplate'].Id;
    //         } else if (lead.Nationality__c == 'India') {
    //             templateId = [SELECT Id FROM EmailTemplate WHERE DeveloperName = 'IndiaEmailTemplate'].Id;
    //         } // Add more conditions for other countries as needed
            
    //         // Create a map to hold the Lead record and email template ID
    //         Map<Object , Map<String, String>> result = new Map<Object , Map<String, String>>();


    //         Messaging.SingleEmailMessage renderResults = Messaging.renderStoredEmailTemplate(templateId, targetObjectId, null);
        
    //         // Create a map to hold the subject and HTML body
    //         Map<String, String> templateresult = new Map<String, String>();
    //         templateresult.put('subject', renderResults.getSubject());
    //         templateresult.put('htmlBody', renderResults.getPlainTextBody());

    //         result.put(lead , templateresult);
            
    //         // Add the map to the results list
    //         results.add(result);
    //     }
        
    //     return results;
    // }
    
@@@@@@@@@@@@ Email Scheduler Apex @@@@@@@@@@@@

public with sharing class EmailScheduler implements Schedulable {
    public String country;
    
    public EmailScheduler(String country) {
        this.country = country;
    }
    
    public void execute(SchedulableContext sc) {
        System.debug('Execute method Of Scheduler Execute');
        // Call the getLeads method to get the leads for the specified country
        List<Map<Object , Map<String, String>>> leads = LeadController.getLeads(country);
        System.debug('Lead List in scheduler == ' + String.valueOf(leads));
        
        // Publish the platform event
        Email_Sent__e event = new Email_Sent__e();
        // Set any fields on the event as necessary
        event.Country__c = country;
        List<Database.SaveResult> results = EventBus.publish(new List<Email_Sent__e>{event});
        // Check for errors
        for (Database.SaveResult result : results) {
            if (!result.isSuccess()) {
                System.debug('Error publishing platform event: ' + result.getErrors()[0].getMessage());
            }
        }
    }
    
    
    
    @AuraEnabled
    public static void scheduleEmail(String country, Datetime sendTime) {
        // Create a cron expression that represents the desired send time
        String cronExpression = System.String.format(
            '{0} {1} {2} {3} {4} ? {5}',
            new List<Object>{
                sendTime.second(),
                sendTime.minute(),
                sendTime.hour(),
                sendTime.day(),
                sendTime.month(),
                sendTime.year()
            }
        );
        
        // Schedule a job to send the email at the desired time
        EmailScheduler scheduler = new EmailScheduler(country);
        System.schedule('Send Email for '+country, cronExpression, scheduler);
    }
}


// public with sharing class EmailScheduler implements Schedulable {
//     public String country;
    
//     public EmailScheduler(String country) {
//         this.country = country;
//     }
    
//     public void execute(SchedulableContext sc) {
//         System.debug('Execute method Of Scheduler Execute');
//         // Call the getLeads method to get the leads for the specified country
//         List<Map<Object , Map<String, String>>> leads = LeadController.getLeads(country);
//         System.debug('Lead List in scheduler == ' + String.valueOf(leads));
//     }
    
//     @AuraEnabled
//     public static void scheduleEmail(String country, Datetime sendTime) {
//         // Create a cron expression that represents the desired send time
//         String cronExpression = System.String.format(
//             '{0} {1} {2} {3} {4} ? {5}',
//             new List<Object>{
//                 sendTime.second(),
//                 sendTime.minute(),
//                 sendTime.hour(),
//                 sendTime.day(),
//                 sendTime.month(),
//                 sendTime.year()
//             }
//         );
        
//         // Schedule a job to send the email at the desired time
//         EmailScheduler scheduler = new EmailScheduler(country);
//         System.schedule('Send Email for '+country, cronExpression, scheduler);
//     }
// }

